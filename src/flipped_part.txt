r,_,_ = eulerFromQuaternion(iter.pose)
if(r == PI):
    wrist.move(pose.x - 1,pose.y,pose.z,arm.wrist.y = part.yaw)
    gripper.activate()
    while(objectnotattached)
    { 
        arm.x = arm.x+0.1
    }
    arm.roll = arm.roll + PI
    arm.return.home()


pregrasp.pose.orientation =  
pregrasp.pose.x = part.pose.x



conveyor

arm.moveoverconveyor()
arm.x = conveyor.x
arm.y = conveyor.y
arm.z = conveyor.z + 5
if(breakbeam1 == triggered)
gripper.activate()
time_required = distancefrombreakbeam/speedofconveyor
speedofarm = 5-height_of_part/time_required

if(object_attached)
{
    movearm_toemptybin()
    place_part
}

conveyor.x = abs(0.57)


##add a bin type in product struct and also add the product to part_in_bins array
bin1 = (abs(x)<2.28),(abs(y)>2.96))
bin2 = (abs(x)<2.28),(abs(y)<2.96))
bin3 = (abs(x)>2.28),(abs(y)<2.96))
bin4 = (abs(x)>2.28),(abs(y)>2.96))


bin5 = (abs(x)<2.28),(abs(y)>2.96))
bin6 = (abs(x)<2.28),(abs(y)<2.96))
bin7 = (abs(x)>2.28),(abs(y)<2.96))
bin8 = (abs(x)>2.28),(abs(y)>2.96))


std::array<std::vector<Product>,8> part_in_bins

std::vector<string> empty_bin

for(i in part_in_bins)
{
    if i.size() == 0;
    std::string name = "bin" + string(i+1)
    empty_bin.add(name)
}

return empty_bin